{"paragraphs":[{"title":"Load Iris Dataset from HDFS","text":"%pyspark\n\niris_df = spark.read.csv(\"/user/maria_dev/asmaa/iris.csv\", header=True, inferSchema=True)\niris_df.show(5)","user":"anonymous","dateUpdated":"2025-07-20T04:43:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+-----------+------------+-----------+-------+\n|sepal_length|sepal_width|petal_length|petal_width|species|\n+------------+-----------+------------+-----------+-------+\n|         5.1|        3.5|         1.4|        0.2| setosa|\n|         4.9|        3.0|         1.4|        0.2| setosa|\n|         4.7|        3.2|         1.3|        0.2| setosa|\n|         4.6|        3.1|         1.5|        0.2| setosa|\n|         5.0|        3.6|         1.4|        0.2| setosa|\n+------------+-----------+------------+-----------+-------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1752293002160_117815367","id":"20250712-040321_248613011","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-20T04:43:31+0000","dateFinished":"2025-07-20T04:43:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2165"},{"title":"Alternative: Load Iris Dataset from Local File System","text":"%md\n\nAdjust the file path below to match your local setup, copy path from hdfs\niris_df = spark.read.csv(\"file:///home/yourusername/path/to/iris.csv\", header=True, inferSchema=True)\niris_df.show(5)","user":"anonymous","dateUpdated":"2025-07-20T04:44:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Adjust the file path below to match your local setup, copy path from hdfs\n<br  />iris_df = spark.read.csv(&ldquo;file:///home/yourusername/path/to/iris.csv&rdquo;, header=True, inferSchema=True)\n<br  />iris_df.show(5)</p>\n"}]},"apps":[],"jobName":"paragraph_1752293002160_117815367","id":"20250712-040321_2040288129","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-20T04:44:01+0000","dateFinished":"2025-07-20T04:44:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2166"},{"title":"Check for Missing Values","text":"%pyspark\n\nfrom pyspark.sql.functions import col, sum\n\niris_df.select([sum(col(c).isNull().cast(\"int\")).alias(c) for c in iris_df.columns]).show()","user":"anonymous","dateUpdated":"2025-07-20T05:20:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+-----------+------------+-----------+-------+\n|sepal_length|sepal_width|petal_length|petal_width|species|\n+------------+-----------+------------+-----------+-------+\n|           0|          0|           0|          0|      0|\n+------------+-----------+------------+-----------+-------+\n\n"}]},"apps":[],"jobName":"paragraph_1752293002160_117815367","id":"20250712-040321_1082474193","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-20T05:20:18+0000","dateFinished":"2025-07-20T05:20:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2167"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2025-07-20T05:20:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1752988824751_742288823","id":"20250720-052024_574827653","dateCreated":"2025-07-20T05:20:24+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2168"},{"title":"Impute Missing Values","text":"%pyspark\n\nfrom pyspark.ml.feature import Imputer\n\nimputer = Imputer(inputCols=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"],\n                    outputCols=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"]).setStrategy(\"mean\")\niris_imputed = imputer.fit(iris_df).transform(iris_df)\niris_imputed.show(5)","user":"anonymous","dateUpdated":"2025-07-20T05:38:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+-----------+------------+-----------+-------+\n|sepal_length|sepal_width|petal_length|petal_width|species|\n+------------+-----------+------------+-----------+-------+\n|         5.1|        3.5|         1.4|        0.2| setosa|\n|         4.9|        3.0|         1.4|        0.2| setosa|\n|         4.7|        3.2|         1.3|        0.2| setosa|\n|         4.6|        3.1|         1.5|        0.2| setosa|\n|         5.0|        3.6|         1.4|        0.2| setosa|\n+------------+-----------+------------+-----------+-------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1752293002160_117815367","id":"20250712-040321_1536667764","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-20T05:38:20+0000","dateFinished":"2025-07-20T05:38:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2169"},{"title":"Encode Label and Assemble Features","text":"%pyspark\n\nfrom pyspark.ml.feature import StringIndexer, VectorAssembler\n\nindexer = StringIndexer(inputCol=\"species\", outputCol=\"label\")\niris_indexed = indexer.fit(iris_imputed).transform(iris_imputed)\n\nassembler = VectorAssembler(inputCols=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"], outputCol=\"raw_features\")\nassembled = assembler.transform(iris_indexed)","user":"anonymous","dateUpdated":"2025-07-20T05:38:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1752293002160_117815367","id":"20250712-040321_1501576837","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-20T05:38:39+0000","dateFinished":"2025-07-20T05:38:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2170"},{"title":"Scale Features","text":"%pyspark\n\nfrom pyspark.ml.feature import StandardScaler\n\nscaler = StandardScaler(inputCol=\"raw_features\", outputCol=\"features\", withStd=True, withMean=True)\niris_scaled = scaler.fit(assembled).transform(assembled)\niris_scaled.select(\"features\", \"label\").show(5)","user":"anonymous","dateUpdated":"2025-07-20T05:38:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+-----+\n|            features|label|\n+--------------------+-----+\n|[-0.8976738791967...|  2.0|\n|[-1.1392004834649...|  2.0|\n|[-1.3807270877331...|  2.0|\n|[-1.5014903898672...|  2.0|\n|[-1.0184371813308...|  2.0|\n+--------------------+-----+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1752293002160_117815367","id":"20250712-040321_1109098095","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-20T05:38:41+0000","dateFinished":"2025-07-20T05:38:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2171"},{"title":"Split Data","text":"%pyspark\n\ntrain_data, test_data = iris_scaled.randomSplit([0.7, 0.3], seed=42)\nprint(\"Training: \" + str(train_data.count()) + \", Testing: \" + str(test_data.count()))\n","user":"anonymous","dateUpdated":"2025-07-20T05:38:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Training: 114, Testing: 36\n"}]},"apps":[],"jobName":"paragraph_1752293002160_117815367","id":"20250712-040321_729920331","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-20T05:38:46+0000","dateFinished":"2025-07-20T05:38:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2172"},{"title":"Apply PCA","text":"%pyspark\n\nfrom pyspark.ml.feature import PCA\n\npca = PCA(k=2, inputCol=\"features\", outputCol=\"pca_features\")\npca_model = pca.fit(iris_scaled)\niris_pca = pca_model.transform(iris_scaled)\niris_pca.select(\"pca_features\", \"label\").show(5, truncate=False)","user":"anonymous","dateUpdated":"2025-07-20T05:38:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------------------------------+-----+\n|pca_features                            |label|\n+----------------------------------------+-----+\n|[2.256980633068026,-0.5040154042276572] |2.0  |\n|[2.0794591188954024,0.6532163936125843] |2.0  |\n|[2.3600440815842076,0.31741394457027783]|2.0  |\n|[2.296503660003884,0.5734466129712279]  |2.0  |\n|[2.3808015864527436,-0.6725144107910812]|2.0  |\n+----------------------------------------+-----+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_1299423839","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-20T05:38:52+0000","dateFinished":"2025-07-20T05:38:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2173"},{"title":"Logistic Regression with Cross-Validation","text":"%pyspark\n\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.tuning import ParamGridBuilder, CrossValidator\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n\nlr = LogisticRegression(maxIter=10)\nlr_param_grid = ParamGridBuilder().addGrid(lr.regParam, [0.01, 0.1, 0.5]).addGrid(lr.elasticNetParam, [0.0, 0.5, 1.0]).build()\nevaluator = MulticlassClassificationEvaluator(metricName=\"accuracy\")\nlr_cv = CrossValidator(estimator=lr, estimatorParamMaps=lr_param_grid, evaluator=evaluator, numFolds=3)\nlr_cv_model = lr_cv.fit(train_data)\nlr_cv_predictions = lr_cv_model.transform(test_data)","user":"anonymous","dateUpdated":"2025-07-12T06:13:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_366987618","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-12T06:13:21+0000","dateFinished":"2025-07-12T06:13:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2174"},{"title":"Random Forest with Cross-Validation","text":"%pyspark\n\nfrom pyspark.ml.classification import RandomForestClassifier\n\nrf = RandomForestClassifier(seed=42)\nrf_param_grid = ParamGridBuilder().addGrid(rf.numTrees, [20, 50, 100]).addGrid(rf.maxDepth, [3, 5, 8]).build()\nrf_cv = CrossValidator(estimator=rf, estimatorParamMaps=rf_param_grid, evaluator=evaluator, numFolds=3)\nrf_cv_model = rf_cv.fit(train_data)\nrf_cv_predictions = rf_cv_model.transform(test_data)","user":"anonymous","dateUpdated":"2025-07-12T06:14:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_212743600","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-12T06:14:26+0000","dateFinished":"2025-07-12T06:14:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2175"},{"title":"Evaluate Both Models","text":"%pyspark\n\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n\n# Initialize the evaluator for accuracy\nevaluator = MulticlassClassificationEvaluator(metricName=\"accuracy\")\n\n# Evaluate tuned Logistic Regression\nlr_acc = evaluator.evaluate(lr_cv_predictions)\nlr_f1 = MulticlassClassificationEvaluator(metricName=\"f1\").evaluate(lr_cv_predictions)\n\n# Evaluate tuned Random Forest\nrf_acc = evaluator.evaluate(rf_cv_predictions)\nrf_f1 = MulticlassClassificationEvaluator(metricName=\"f1\").evaluate(rf_cv_predictions)\n\n# Print results\nprint(\"Tuned Logistic Regression → Accuracy: {:.2f}, F1-score: {:.2f}\".format(lr_acc, lr_f1))\nprint(\"Tuned Random Forest       → Accuracy: {:.2f}, F1-score: {:.2f}\".format(rf_acc, rf_f1))\n\n","user":"anonymous","dateUpdated":"2025-07-12T06:20:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Tuned Logistic Regression → Accuracy: 0.94, F1-score: 0.94\nTuned Random Forest       → Accuracy: 0.94, F1-score: 0.94\n"}]},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_705938565","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-12T06:20:31+0000","dateFinished":"2025-07-12T06:20:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2176"},{"title":"Correlation Matrix Plot","text":"%pyspark\r\n\r\nimport pandas as pd\r\nimport seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom IPython.display import Image, display\r\n\r\n# Convert Spark DF to Pandas DF\r\niris_pd = iris_df.toPandas()\r\n\r\n# Plot heatmap\r\nplt.figure(figsize=(8,6))\r\nsns.heatmap(iris_pd.corr(), annot=True, cmap=\"coolwarm\", fmt=\".2f\")\r\nplt.title(\"Correlation Matrix of Iris Features\")\r\n\r\n# Save and display plot as image (optional fallback)\r\nplt.savefig('/tmp/iris_correlation_heatmap.png')\r\nplt.close()\r\ndisplay(Image('/tmp/iris_correlation_heatmap.png'))\r\n","user":"anonymous","dateUpdated":"2025-07-12T06:33:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3044110664353561891.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3044110664353561891.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nImportError: No module named pandas\n\n"}]},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_2057497282","dateCreated":"2025-07-12T04:03:22+0000","dateStarted":"2025-07-12T06:33:27+0000","dateFinished":"2025-07-12T06:33:27+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:2177"},{"text":"%sh\npip install --user matplotlib seaborn scikit-learn pandas\n\n","user":"anonymous","dateUpdated":"2025-07-12T06:33:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"bash: pip3: command not found\n"},{"type":"TEXT","data":"ExitValue: 127"}]},"apps":[],"jobName":"paragraph_1752301859680_-537085571","id":"20250712-063059_1016256101","dateCreated":"2025-07-12T06:30:59+0000","dateStarted":"2025-07-12T06:33:27+0000","dateFinished":"2025-07-12T06:33:27+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:2178"},{"text":"%pyspark\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import DoubleType\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport pandas as pd\n\n# Convert Spark DataFrames to Pandas for visualization and sklearn metrics\nlr_pred_pd = lr_cv_predictions.select(\"label\", \"probability\", \"prediction\").toPandas()\nrf_pred_pd = rf_cv_predictions.select(\"label\", \"probability\", \"prediction\").toPandas()\n\n# Extract probability of class 1\nlr_pred_pd[\"prob_1\"] = lr_pred_pd[\"probability\"].apply(lambda x: x[1] if len(x) > 1 else 0)\nrf_pred_pd[\"prob_1\"] = rf_pred_pd[\"probability\"].apply(lambda x: x[1] if len(x) > 1 else 0)\n\n# Print classification reports\nprint(\"Logistic Regression Report\")\nprint(classification_report(lr_pred_pd[\"label\"], lr_pred_pd[\"prediction\"]))\n\nprint(\"Random Forest Report\")\nprint(classification_report(rf_pred_pd[\"label\"], rf_pred_pd[\"prediction\"]))\n\n# Plot confusion matrices\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\nsns.heatmap(confusion_matrix(lr_pred_pd[\"label\"], lr_pred_pd[\"prediction\"]), annot=True, fmt='d', cmap=\"Blues\", ax=axes[0])\naxes[0].set_title(\"Logistic Regression Confusion Matrix\")\n\nsns.heatmap(confusion_matrix(rf_pred_pd[\"label\"], rf_pred_pd[\"prediction\"]), annot=True, fmt='d', cmap=\"Greens\", ax=axes[1])\naxes[1].set_title(\"Random Forest Confusion Matrix\")\n\nplt.tight_layout()\nplt.show()\n\n","user":"anonymous","dateUpdated":"2025-07-12T06:32:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3044110664353561891.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3044110664353561891.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nImportError: No module named matplotlib.pyplot\n\n"}]},"apps":[],"jobName":"paragraph_1752301810403_2110928214","id":"20250712-063010_80321139","dateCreated":"2025-07-12T06:30:10+0000","dateStarted":"2025-07-12T06:32:35+0000","dateFinished":"2025-07-12T06:32:35+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:2179"},{"title":"Confusion Matrix and Classification Report","text":"%python\n\nfrom sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay, roc_auc_score, roc_curve\n\nlr_pred_pd = lr_cv_predictions.select(\"label\", \"probability\", \"prediction\").toPandas()\nrf_pred_pd = rf_cv_predictions.select(\"label\", \"probability\", \"prediction\").toPandas()\n\nlr_pred_pd[\"prob_1\"] = lr_pred_pd[\"probability\"].apply(lambda x: x[1] if len(x) > 1 else 0)\nrf_pred_pd[\"prob_1\"] = rf_pred_pd[\"probability\"].apply(lambda x: x[1] if len(x) > 1 else 0)\n\nprint(\"Logistic Regression Report\")\nprint(classification_report(lr_pred_pd[\"label\"], lr_pred_pd[\"prediction\"]))\n\nprint(\"Random Forest Report\")\nprint(classification_report(rf_pred_pd[\"label\"], rf_pred_pd[\"prediction\"]))\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\nsns.heatmap(confusion_matrix(lr_pred_pd[\"label\"], lr_pred_pd[\"prediction\"]), annot=True, fmt='d', cmap=\"Blues\", ax=axes[0])\naxes[0].set_title(\"Logistic Regression Confusion Matrix\")\nsns.heatmap(confusion_matrix(rf_pred_pd[\"label\"], rf_pred_pd[\"prediction\"]), annot=True, fmt='d', cmap=\"Greens\", ax=axes[1])\naxes[1].set_title(\"Random Forest Confusion Matrix\")\nplt.tight_layout()\nplt.show()","dateUpdated":"2025-07-12T04:03:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_291350573","dateCreated":"2025-07-12T04:03:22+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2180"},{"title":"ROC Curve Plot","text":"%python\n\nfpr_lr, tpr_lr, _ = roc_curve(lr_pred_pd[\"label\"], lr_pred_pd[\"prob_1\"], pos_label=1)\nfpr_rf, tpr_rf, _ = roc_curve(rf_pred_pd[\"label\"], rf_pred_pd[\"prob_1\"], pos_label=1)\nauc_lr = roc_auc_score(lr_pred_pd[\"label\"], lr_pred_pd[\"prob_1\"])\nauc_rf = roc_auc_score(rf_pred_pd[\"label\"], rf_pred_pd[\"prob_1\"])\n\nplt.figure(figsize=(8, 6))\nplt.plot(fpr_lr, tpr_lr, label=f\"Logistic Regression (AUC = {auc_lr:.2f})\")\nplt.plot(fpr_rf, tpr_rf, label=f\"Random Forest (AUC = {auc_rf:.2f})\")\nplt.plot([0, 1], [0, 1], \"k--\")\nplt.title(\"ROC Curve\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.legend()\nplt.grid()\nplt.show()","dateUpdated":"2025-07-12T04:03:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_1814240259","dateCreated":"2025-07-12T04:03:22+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2181"},{"title":"Descriptive Statistics","text":"%pyspark\n\niris_df.describe().show()","dateUpdated":"2025-07-12T04:03:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_1478544110","dateCreated":"2025-07-12T04:03:22+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2182"},{"title":"Boxplot of All Features","text":"%python\n\nplt.figure(figsize=(12, 8))\nsns.boxplot(data=iris_pd.drop('species', axis=1))\nplt.title('Boxplot of Iris Features')\nplt.xlabel('Feature')\nplt.ylabel('Value')\nplt.show()","user":"anonymous","dateUpdated":"2025-07-12T06:28:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"paragraph_1752293002161_117430618's Interpreter python not found"}]},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_901369810","dateCreated":"2025-07-12T04:03:22+0000","status":"ERROR","errorMessage":"org.apache.zeppelin.interpreter.InterpreterException: paragraph_1752293002161_117430618's Interpreter python not found\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:644)\n\tat org.apache.zeppelin.socket.NotebookServer.persistAndExecuteSingleParagraph(NotebookServer.java:1657)\n\tat org.apache.zeppelin.socket.NotebookServer.runParagraph(NotebookServer.java:1631)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:266)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:128)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:122)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:161)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)\n\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:632)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:480)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:748)\n","progressUpdateIntervalMs":500,"$$hashKey":"object:2183"},{"title":"Histograms of Iris Features","text":"%python\n\niris_pd.hist(figsize=(10, 8), bins=15)\nplt.suptitle('Histogram of Iris Features')\nplt.tight_layout()\nplt.show()","dateUpdated":"2025-07-12T04:03:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_1230574984","dateCreated":"2025-07-12T04:03:22+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2184"},{"title":"Boxplot of Petal Length by Species","text":"%python\n\nplt.figure(figsize=(12, 6))\nsns.boxplot(x='species', y='petal_length', data=iris_pd)\nplt.title('Petal Length Distribution by Species')\nplt.show()","dateUpdated":"2025-07-12T04:03:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1752293002161_117430618","id":"20250712-040321_1039059876","dateCreated":"2025-07-12T04:03:22+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2185"}],"name":"Iris ML Classification Tutorial - Full Pipeline","id":"2KZJ9Q73Z","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}